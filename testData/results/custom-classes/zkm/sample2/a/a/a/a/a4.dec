package a.a.a.a;

import java.lang.invoke.CallSite;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MutableCallSite;
import java.lang.invoke.MethodHandles.Lookup;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.IvParameterSpec;

public class a4 {
    private static final char a;
    private static final String b;
    private static final char c;
    private static final ConcurrentMap<String, List<Locale>> d;
    private static final ConcurrentMap<String, List<Locale>> e;
    private static final String[] g;
    private static final String[] h;
    private static final Map i = new HashMap(13);
    private static final long[] j;
    private static final Integer[] k;
    private static final Map l;

    public static List a() {
        return a5.a(new Object[0]);
    }

    private static List b(Predicate var0) {
        return a(new Object[0]).stream().filter(var0).collect(Collectors.toList());
    }

    public static Set a() {
        return a5.a(new Object[0]);
    }

    public static List c(long var0, String var2) {
        long var10000 = 31437394211371L ^ var0;
        return var2 == null
            ? Collections.emptyList()
            : e.computeIfAbsent(
                var2,
                var1 -> Collections.unmodifiableList(
                        b(
                            new Object[]{
                                (Predicate<Locale>)var1x -> var2.equals(var1x.getLanguage()) && !var1x.getCountry().isEmpty() && var1x.getVariant().isEmpty()
                            }
                        )
                    )
            );
    }

    public static boolean a(Locale var0) {
        return a(new Object[0]).contains(var0);
    }

    private static boolean b(String var0, long var1) {
        var1 = 31437394211371L ^ var1;
        long var4 = var1 ^ 34857456567897L;
        return bl.w(new Object[]{var0, var4}) && var0.length() == 2;
    }

    private static boolean c(long var0, String var2) {
        var0 = 31437394211371L ^ var0;
        long var4 = var0 ^ 48043344260702L;
        return bl.v(new Object[]{var4, var2}) && (var2.length() == 2 || var2.length() == 3);
    }

    public static boolean d(Locale var0, long var1) {
        var1 = 31437394211371L ^ var1;
        return var0 == null || a<"n">(15615, 9195357022975540980L ^ var1).equals(var0.toLanguageTag());
    }

    private static boolean e(String var0, long var1) {
        var1 = 31437394211371L ^ var1;
        long var4 = var1 ^ 46616467215434L;
        return bl.K(new Object[]{var4, var0}) && var0.length() == 3;
    }

    public static List d(String var0, long var1) {
        long var10000 = 31437394211371L ^ var1;
        return var0 == null
            ? Collections.emptyList()
            : d.computeIfAbsent(
                var0,
                var1x -> Collections.unmodifiableList(
                        b(new Object[]{(Predicate<Locale>)var1xx -> var0.equals(var1xx.getCountry()) && var1xx.getVariant().isEmpty()})
                    )
            );
    }

    public static List e(long var0, Locale var2) {
        var0 = 31437394211371L ^ var0;
        long var4 = var0 ^ 39473653018733L;
        return f(new Object[]{var4, var2, var2});
    }

    public static List f(long var0, Locale var2, Locale var3) {
        long var10000 = 31437394211371L ^ var0;
        ArrayList var5 = new ArrayList(4);
        if (var2 != null) {
            var5.add(var2);
            if (!var2.getVariant().isEmpty()) {
                var5.add(new Locale(var2.getLanguage(), var2.getCountry()));
            }

            if (!var2.getCountry().isEmpty()) {
                var5.add(new Locale(var2.getLanguage(), ""));
            }

            if (!var5.contains(var3)) {
                var5.add(var3);
            }
        }

        return Collections.unmodifiableList(var5);
    }

    private static Locale a(String var0, long var1) {
        var1 = 31437394211371L ^ var1;
        long var4 = var1 ^ 66218639382438L;
        long var6 = var1 ^ 111702527787094L;
        long var8 = var1 ^ 130108620867227L;
        if (c(new Object[]{var4, var0})) {
            return new Locale(var0);
        } else {
            int var11 = var0.indexOf(b<"f">(15280, 8092096839071741905L ^ var1)) != -1
                ? b<"f">(15280, 8092096839071741905L ^ var1)
                : b<"f">(4837, 2589275489172102784L ^ var1);
            String[] var12 = var0.split(String.valueOf((char)var11), 3);
            String var13 = var12[0];
            if (var12.length == 2) {
                String var14 = var12[1];
                if (c(new Object[]{var4, var13}) && b(new Object[]{var14, var8}) || e(new Object[]{var14, var6})) {
                    return new Locale(var13, var14);
                }
            } else if (var12.length == 3) {
                String var17 = var12[1];
                String var15 = var12[2];
                if (c(new Object[]{var4, var13}) && (var17.isEmpty() || b(new Object[]{var17, var8}) || e(new Object[]{var17, var6})) && !var15.isEmpty()) {
                    return new Locale(var13, var17, var15);
                }
            }

            throw new IllegalArgumentException(a<"n">(1237, 6134404036908578204L ^ var1) + var0);
        }
    }

    public static Locale b(Locale var0, long var1) {
        long var10000 = 31437394211371L ^ var1;
        return var0 != null ? var0 : Locale.getDefault();
    }

    public static Locale c(String var0, long var1) {
        var1 = 31437394211371L ^ var1;
        long var4 = var1 ^ 1247888201670L;
        int[] var6 = aa.b();
        String var10000 = var0;
        if (var6 == null) {
            if (var0 == null) {
                return null;
            }

            var10000 = var0;
        }

        int var12 = var10000.isEmpty();
        int[] var10001 = var6;
        if (var1 > 0L) {
            if (var6 == null) {
                if (var12 != 0) {
                    return new Locale("", "");
                }

                var12 = var0.contains("#");
            }

            var10001 = var6;
        }

        if (var10001 == null) {
            if (var12 != 0) {
                throw new IllegalArgumentException(a<"n">(21401, 4624162312858634044L ^ var1) + var0);
            }

            var12 = var0.length();
        }

        int var7 = var12;
        int var13 = var7;
        if (var6 == null) {
            if (var7 < 2) {
                throw new IllegalArgumentException(a<"n">(1237, 6134424192876040305L ^ var1) + var0);
            }

            var13 = var0.charAt(0);
        }

        int var8;
        label125: {
            var8 = var13;
            var14 = var8;
            var16 = b<"f">(28702, 2493314406039607699L ^ var1);
            label115:
            if (var6 == null) {
                if (var8 != var16) {
                    var14 = var8;
                    var16 = b<"f">(32635, 5718631925737903858L ^ var1);
                    if (var1 <= 0L || var6 != null) {
                        break label115;
                    }

                    if (var8 != var16) {
                        return a(new Object[]{var0, var4});
                    }
                }

                var14 = var7;
                if (var6 != null) {
                    break label125;
                }

                var16 = 3;
            }

            if (var14 < var16) {
                throw new IllegalArgumentException(a<"n">(1237, 6134424192876040305L ^ var1) + var0);
            }

            var14 = var0.charAt(1);
        }

        label102: {
            int var9 = var14;
            char var10 = var0.charAt(2);
            var15 = Character.isUpperCase((char)var9);
            var10001 = var6;
            if (var1 >= 0L) {
                if (var6 == null) {
                    if (var15 == 0) {
                        throw new IllegalArgumentException(a<"n">(1237, 6134424192876040305L ^ var1) + var0);
                    }

                    var15 = Character.isUpperCase(var10);
                }

                if (var1 <= 0L) {
                    break label102;
                }

                var10001 = var6;
            }

            if (var10001 == null) {
                if (var15 == 0) {
                    throw new IllegalArgumentException(a<"n">(1237, 6134424192876040305L ^ var1) + var0);
                }

                var15 = var7;
            }
        }

        label87: {
            var18 = 3;
            int[] var10002 = var6;
            if (var1 >= 0L) {
                if (var6 == null) {
                    if (var15 == 3) {
                        return new Locale("", var0.substring(1, 3));
                    }

                    var15 = var7;
                    var18 = 5;
                }

                if (var1 <= 0L) {
                    break label87;
                }

                var10002 = var6;
            }

            if (var10002 == null) {
                if (var15 < var18) {
                    throw new IllegalArgumentException(a<"n">(1237, 6134424192876040305L ^ var1) + var0);
                }

                var15 = var0.charAt(3);
                var18 = var8;
            }
        }

        if (var15 != var18) {
            throw new IllegalArgumentException(a<"n">(1237, 6134424192876040305L ^ var1) + var0);
        } else {
            return new Locale("", var0.substring(1, 3), var0.substring(4));
        }
    }

    static {
        long var11 = 83388844507925L;
        Cipher var13;
        Cipher var10000 = var13 = Cipher.getInstance("DES/CBC/PKCS5Padding");
        SecretKeyFactory var10002 = SecretKeyFactory.getInstance("DES");
        byte[] var10003 = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};

        for (int var14 = 1; var14 < 8; var14++) {
            var10003[var14] = (byte)((int)(var11 << var14 * 8 >>> 56));
        }

        var10000.init(2, var10002.generateSecret(new DESKeySpec(var10003)), new IvParameterSpec(new byte[8]));
        String[] var20 = new String[4];
        int var18 = 0;
        String var17 = "VpG\u000f\u0006z¡4âG4¥G&Êÿ©\u0006\u009cÓì{\u0097^G\u00824<\u0092\u00906Ýº[LjtDC\u0007(\u000e\u0088\"¡Ü&¦o\u008c/Æ)çÕ\u0097\\º¢Gaö~2*\u0005Â\u0013L\u00ad\u001e,Å$Sì\u0016þÐD\u001b";
        byte var19 = 81;
        char var16 = '(';
        int var24 = -1;

        label54:
        while (true) {
            String var25 = var17.substring(++var24, var24 + var16);
            int var10001 = -1;

            while (true) {
                byte[] var21 = var13.doFinal(var25.getBytes("ISO-8859-1"));
                String var36 = a(var21).intern();
                switch (var10001) {
                    case 0:
                        var20[var18++] = var36;
                        if ((var24 += var16) >= var19) {
                            g = var20;
                            h = new String[4];
                            b = a<"n">(15899, 9143734501605108560L);
                            l = new HashMap(13);
                            Cipher var0;
                            var10000 = var0 = Cipher.getInstance("DES/CBC/NoPadding");
                            var10002 = SecretKeyFactory.getInstance("DES");
                            var10003 = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};

                            for (int var1 = 1; var1 < 8; var1++) {
                                var10003[var1] = (byte)((int)(var11 << var1 * 8 >>> 56));
                            }

                            var10000.init(2, var10002.generateSecret(new DESKeySpec(var10003)), new IvParameterSpec(new byte[8]));
                            long[] var6 = new long[6];
                            int var3 = 0;
                            String var4 = "\u008aö';W\u0089S\u000eçÑ$\u0091\u009d(¦ö/ú\u0016\u009düõRzSã Õ\t<)ø";
                            byte var5 = 32;
                            byte var2 = 0;

                            label36:
                            while (true) {
                                var10001 = var2;
                                var2 += 8;
                                byte[] var7 = var4.substring(var10001, var2).getBytes("ISO-8859-1");
                                long[] var28 = var6;
                                var10001 = var3++;
                                long var40 = ((long)var7[0] & 255L) << 56
                                    | ((long)var7[1] & 255L) << 48
                                    | ((long)var7[2] & 255L) << 40
                                    | ((long)var7[3] & 255L) << 32
                                    | ((long)var7[4] & 255L) << 24
                                    | ((long)var7[5] & 255L) << 16
                                    | ((long)var7[6] & 255L) << 8
                                    | (long)var7[7] & 255L;
                                byte var43 = -1;

                                while (true) {
                                    long var8 = var40;
                                    byte[] var10 = var0.doFinal(
                                        new byte[]{
                                            (byte)((int)(var8 >>> 56)),
                                            (byte)((int)(var8 >>> 48)),
                                            (byte)((int)(var8 >>> 40)),
                                            (byte)((int)(var8 >>> 32)),
                                            (byte)((int)(var8 >>> 24)),
                                            (byte)((int)(var8 >>> 16)),
                                            (byte)((int)(var8 >>> 8)),
                                            (byte)((int)var8)
                                        }
                                    );
                                    long var45 = ((long)var10[0] & 255L) << 56
                                        | ((long)var10[1] & 255L) << 48
                                        | ((long)var10[2] & 255L) << 40
                                        | ((long)var10[3] & 255L) << 32
                                        | ((long)var10[4] & 255L) << 24
                                        | ((long)var10[5] & 255L) << 16
                                        | ((long)var10[6] & 255L) << 8
                                        | (long)var10[7] & 255L;
                                    switch (var43) {
                                        case 0:
                                            var28[var10001] = var45;
                                            if (var2 >= var5) {
                                                j = var6;
                                                k = new Integer[6];
                                                c = (char)b<"f">(16481, 4871103691199342599L);
                                                a = (char)b<"f">(4103, 7748647110630619232L);
                                                d = new ConcurrentHashMap<>();
                                                e = new ConcurrentHashMap<>();
                                                return;
                                            }
                                            break;
                                        default:
                                            var28[var10001] = var45;
                                            if (var2 < var5) {
                                                continue label36;
                                            }

                                            var4 = "¦³±à+\u0082A½e\u0006ßìP\u009a%¶";
                                            var5 = 16;
                                            var2 = 0;
                                    }

                                    byte var34 = var2;
                                    var2 += 8;
                                    var7 = var4.substring(var34, var2).getBytes("ISO-8859-1");
                                    var28 = var6;
                                    var10001 = var3++;
                                    var40 = ((long)var7[0] & 255L) << 56
                                        | ((long)var7[1] & 255L) << 48
                                        | ((long)var7[2] & 255L) << 40
                                        | ((long)var7[3] & 255L) << 32
                                        | ((long)var7[4] & 255L) << 24
                                        | ((long)var7[5] & 255L) << 16
                                        | ((long)var7[6] & 255L) << 8
                                        | (long)var7[7] & 255L;
                                    var43 = 0;
                                }
                            }
                        }

                        var16 = var17.charAt(var24);
                        break;
                    default:
                        var20[var18++] = var36;
                        if ((var24 += var16) < var19) {
                            var16 = var17.charAt(var24);
                            continue label54;
                        }

                        var17 = "ÇDÉ\u0087¯Ê£h\bS\u0012à±´Ö\u0080\u0010\u0006gÃ\u00051\u0007QYÿ5\u0099\u007f\u0082 Çm";
                        var19 = 33;
                        var16 = 16;
                        var24 = -1;
                }

                var25 = var17.substring(++var24, var24 + var16);
                var10001 = 0;
            }
        }
    }

    private static String a(byte[] var0) {
        int var1 = 0;
        int var2;
        char[] var3 = new char[var2 = var0.length];

        for (int var4 = 0; var4 < var2; var4++) {
            int var5;
            if ((var5 = 255 & var0[var4]) < 192) {
                var3[var1++] = (char)var5;
            } else if (var5 < 224) {
                char var6 = (char)((char)(var5 & 31) << 6);
                byte var8 = var0[++var4];
                var6 = (char)(var6 | (char)(var8 & 63));
                var3[var1++] = var6;
            } else if (var4 < var2 - 2) {
                char var12 = (char)((char)(var5 & 15) << '\f');
                byte var9 = var0[++var4];
                var12 = (char)(var12 | (char)(var9 & 63) << 6);
                var9 = var0[++var4];
                var12 = (char)(var12 | (char)(var9 & 63));
                var3[var1++] = var12;
            }
        }

        return new String(var3, 0, var1);
    }

    private static String a(int var0, long var1) {
        int var5 = var0 ^ (int)(var1 & 32767L) ^ 21833;
        if (h[var5] == null) {
            Object[] var4;
            try {
                Long var3 = Thread.currentThread().getId();
                var4 = (Object[])i.get(var3);
                if (var4 == null) {
                    var4 = new Object[]{Cipher.getInstance("DES/CBC/PKCS5Padding"), SecretKeyFactory.getInstance("DES"), new IvParameterSpec(new byte[8])};
                    i.put(var3, var4);
                }
            } catch (Exception var10) {
                throw new RuntimeException("a/a/a/a/a4", var10);
            }

            byte[] var6 = new byte[8];
            var6[0] = (byte)((int)(var1 >>> 56));

            for (int var7 = 1; var7 < 8; var7++) {
                var6[var7] = (byte)((int)(var1 << var7 * 8 >>> 56));
            }

            DESKeySpec var11 = new DESKeySpec(var6);
            SecretKey var8 = ((SecretKeyFactory)var4[1]).generateSecret(var11);
            ((Cipher)var4[0]).init(2, var8, (IvParameterSpec)var4[2]);
            byte[] var9 = g[var5].getBytes("ISO-8859-1");
            h[var5] = a(((Cipher)var4[0]).doFinal(var9));
        }

        return h[var5];
    }

    private static Object a(Lookup var0, MutableCallSite var1, String var2, Object[] var3) {
        int var4 = (Integer)var3[0];
        long var5 = (Long)var3[1];
        String var7 = a(var4, var5);
        MethodHandle var8 = MethodHandles.constant(String.class, var7);
        var1.setTarget(MethodHandles.dropArguments(var8, 0, int.class, long.class));
        return var7;
    }

    private static CallSite a(Lookup var0, String var1, MethodType var2) {
        MutableCallSite var3 = new MutableCallSite(var2);

        try {
            var3.setTarget(
                MethodHandles.explicitCastArguments(
                    MethodHandles.insertArguments("a".asCollector(Object[].class, var2.parameterCount()), 0, var0, var3, var1), var2
                )
            );
            return var3;
        } catch (Exception var5) {
            throw new RuntimeException("a/a/a/a/a4" + " : " + var1 + " : " + var2.toString(), var5);
        }
    }

    private static int b(int var0, long var1) {
        int var3 = var0 ^ (int)(var1 & 32767L) ^ 10340;
        if (k[var3] == null) {
            byte[] var4 = new byte[]{
                (byte)((int)(var1 >>> 56)),
                (byte)((int)(var1 >>> 48)),
                (byte)((int)(var1 >>> 40)),
                (byte)((int)(var1 >>> 32)),
                (byte)((int)(var1 >>> 24)),
                (byte)((int)(var1 >>> 16)),
                (byte)((int)(var1 >>> 8)),
                (byte)((int)var1)
            };
            long var5 = j[var3];
            byte[] var7 = new byte[]{
                (byte)((int)(var5 >>> 56)),
                (byte)((int)(var5 >>> 48)),
                (byte)((int)(var5 >>> 40)),
                (byte)((int)(var5 >>> 32)),
                (byte)((int)(var5 >>> 24)),
                (byte)((int)(var5 >>> 16)),
                (byte)((int)(var5 >>> 8)),
                (byte)((int)var5)
            };
            Long var8 = Thread.currentThread().getId();
            Object[] var9 = (Object[])l.get(var8);

            byte[] var10;
            try {
                if (var9 == null) {
                    var9 = new Object[]{Cipher.getInstance("DES/CBC/NoPadding"), SecretKeyFactory.getInstance("DES"), new IvParameterSpec(new byte[8])};
                    l.put(var8, var9);
                }

                DESKeySpec var11 = new DESKeySpec(var4);
                SecretKey var12 = ((SecretKeyFactory)var9[1]).generateSecret(var11);
                Cipher var13 = (Cipher)var9[0];
                var13.init(2, var12, (IvParameterSpec)var9[2]);
                var10 = var13.doFinal(var7);
            } catch (Exception var14) {
                throw new RuntimeException("a/a/a/a/a4", var14);
            }

            int var15 = (var10[4] & 255) << 24 | (var10[5] & 255) << 16 | (var10[6] & 255) << 8 | var10[7] & 255;
            k[var3] = var15;
        }

        return k[var3];
    }

    private static int b(Lookup var0, MutableCallSite var1, String var2, Object[] var3) {
        int var4 = (Integer)var3[0];
        long var5 = (Long)var3[1];
        int var7 = b(var4, var5);
        MethodHandle var8 = MethodHandles.constant(int.class, var7);
        var1.setTarget(MethodHandles.dropArguments(var8, 0, int.class, long.class));
        return var7;
    }

    private static CallSite b(Lookup var0, String var1, MethodType var2) {
        MutableCallSite var3 = new MutableCallSite(var2);

        try {
            var3.setTarget(
                MethodHandles.explicitCastArguments(
                    MethodHandles.insertArguments("b".asCollector(Object[].class, var2.parameterCount()), 0, var0, var3, var1), var2
                )
            );
            return var3;
        } catch (Exception var5) {
            throw new RuntimeException("a/a/a/a/a4" + " : " + var1 + " : " + var2.toString(), var5);
        }
    }
}
